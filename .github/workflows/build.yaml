
name: Build with Patch

on:
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Read configuration from base.json
        id: config
        run: |
          if [ ! -f base.json ]; then
            echo "Error: base.json file not found"
            exit 1
          fi
          
          REPOSITORY=$(jq -r '.repository' base.json)
          echo "Repository: $REPOSITORY"
          if [ "$REPOSITORY" = "null" ]; then
            echo "Error: repository not found in base.json"
            exit 1
          fi

          TAG=$(jq -r '.tag' base.json)
          echo "Tag: $TAG"
          if [ "$TAG" = "null" ]; then
            echo "Error: tag not found in base.json"
            exit 1
          fi

          echo "repository=$REPOSITORY" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Clone external repository
        run: |
          git clone ${{ steps.config.outputs.repository }} librechat
          cd librechat
          git checkout ${{ steps.config.outputs.tag }}
          echo "Cloned repository at tag ${{ steps.config.outputs.tag }}"
      
      - name: Apply git patch
        run: |
          cd librechat

          echo "Applying patch..."
          git apply ../external-jwt.patch

          # Show what files were modified
          git status

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.config.outputs.tag }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./librechat
          file: ./librechat/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Output image details
        run: |
          echo "## Docker Image Built Successfully! 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ steps.config.outputs.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ steps.config.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image Tags:**" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Command:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
